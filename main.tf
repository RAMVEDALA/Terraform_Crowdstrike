# Execute the Python script to fetch hostnames
resource "null_resource" "fetch_hostnames" {
  provisioner "local-exec" {
    command = "python3 ${path.module}/fetch_hostnames.py"
  }
}

# Read the platform_host_map from the JSON file generated by the Python script
data "local_file" "platform_host_map" {
  depends_on = [null_resource.fetch_hostnames]
  filename   = "${path.module}/platform_host_map.json"
}

# Parse the JSON content into a map
locals {
  platform_host_map = jsondecode(data.local_file.platform_host_map.content)
}

# Create host groups dynamically based on the platform_host_map
resource "crowdstrike_host_group" "static_host_group" {
  for_each = local.platform_host_map

  name        = "${each.key}_devices"
  description = "Host group for ${each.key} devices"
  type        = "staticByID"
  host_ids    = each.value
}

# Create dynamic host groups based on the tags defined in the variable
resource "crowdstrike_host_group" "dynamic_host_group" {
  for_each = toset(var.host_tags) # Loop over the tags from the variable

  name        = "Dynamic Host Group for ${each.value}" # Change name as required
  description = "Dynamic host group for ${each.value} workstations/servers"
  type        = "dynamic"

  # Dynamically assign hosts based on the tag
  assignment_rule = "tags:'${each.value}'"
}


resource "crowdstrike_prevention_policy_linux" "Phase1_linux_initial_deployment" {
  name            = "Phase1_linux_prevention_policy"
  enabled         = true
  description     = "Phase1_initial_deployment_linux_prevention_policy"
  host_groups     = ["<give_host_groups_names>"] #specify the linux host groups names here
  ioa_rule_groups = []

  #We need to always have more Detection and Less Prevention
  #We have different values like DISABLED, CAUTIOUS, MODERATE, AGGRESSIVE, EXTRA AGGRESSIVE
  cloud_anti_malware = {
    "detection"  = "MODERATE"
    "prevention" = "CAUTIOUS"
  }

  sensor_anti_malware = {
    "detection"  = "MODERATE"
    "prevention" = "CAUTIOUS"
  }
  quarantine                                   = true
  custom_blocking                              = true
  prevent_suspicious_processes                 = true
  script_based_execution_monitoring            = true
  upload_unknown_executables                   = true
  upload_unknown_detection_related_executables = true
  drift_prevention                             = true
  email_protocol_visibility                    = true
  filesystem_visibility                        = true
  ftp_visibility                               = true
  http_visibility                              = true
  network_visibility                           = true
  tls_visibility                               = true
}


resource "crowdstrike_prevention_policy_mac" "Phase1_mac_initial_deployment" {
  name            = "Phase1_mac_initial_deployment"
  enabled         = true
  description     = "Phase1_mac_initial_deployment"
  host_groups     = ["<give_host_groups_names>"] #specify the mac host groups names here
  ioa_rule_groups = []
  cloud_adware_and_pup = {
    "detection"  = "MODERATE"
    "prevention" = "CAUTIOUS"
  }
  cloud_anti_malware = {
    "detection"  = "MODERATE"
    "prevention" = "CAUTIOUS"
  }
  sensor_anti_malware = {
    "detection"  = "MODERATE"
    "prevention" = "CAUTIOUS"
  }
  sensor_adware_and_pup = {
    "detection"  = "MODERATE"
    "prevention" = "CAUTIOUS"
  }
  notify_end_users                             = true
  custom_blocking                              = true
  detect_on_write                              = true
  intelligence_sourced_threats                 = true
  prevent_suspicious_processes                 = true
  quarantine                                   = true
  quarantine_on_write                          = true
  script_based_execution_monitoring            = true
  sensor_tampering_protection                  = true
  upload_unknown_executables                   = true
  upload_unknown_detection_related_executables = true
  xpcom_shell                                  = true
  kc_password_decoded                          = true
  hash_collector                               = true
  empyre_backdoor                              = true
  chopper_webshell                             = true
}


resource "crowdstrike_prevention_policy_windows" "Phase1_windows_initial_deployment" {
  name            = "Phase1_windows_initial_deployment"
  enabled         = true
  description     = "Phase1_windows_initial_deployment"
  host_groups     = ["<give_host_groups_names>"] #specify the  windows groups names here
  ioa_rule_groups = []
  adware_and_pup = {
    "detection"  = "MODERATE"
    "prevention" = "CAUTIOUS"
  }
  cloud_anti_malware_microsoft_office_files = {
    detection  = "MODERATE"
    prevention = "DISABLED"
  }
  cloud_anti_malware = {
    "detection"  = "MODERATE"
    "prevention" = "CAUTIOUS"
  }
  cloud_anti_malware_user_initiated = {
    "detection"  = "MODERATE"
    "prevention" = "CAUTIOUS"
  }
  sensor_anti_malware = {
    "detection"  = "MODERATE"
    "prevention" = "CAUTIOUS"
  }
  sensor_anti_malware_user_initiated = {
    "detection"  = "MODERATE"
    "prevention" = "CAUTIOUS"
  }
  extended_user_mode_data = {
    "detection" = "MODERATE"
  }
  usb_insertion_triggered_scan                   = false
  application_exploitation_activity              = false
  additional_user_mode_data                      = false
  notify_end_users                               = false
  advanced_remediation                           = false
  backup_deletion                                = false
  bios_deep_visibility                           = false
  chopper_webshell                               = false
  code_injection                                 = false
  credential_dumping                             = false
  cryptowall                                     = false
  custom_blocking                                = false
  detect_on_write                                = false
  drive_by_download                              = false
  driver_load_prevention                         = false
  interpreter_only                               = false
  engine_full_visibility                         = false
  enhanced_exploitation_visibility               = false
  enhanced_ml_for_larger_files                   = false
  file_encryption                                = false
  file_system_access                             = false
  force_aslr                                     = false
  force_dep                                      = false
  heap_spray_preallocation                       = false
  null_page_allocation                           = false
  seh_overwrite_protection                       = false
  hardware_enhanced_exploit_detection            = false
  http_detections                                = false
  redact_http_detection_details                  = false
  intelligence_sourced_threats                   = false
  javascript_via_rundll32                        = false
  locky                                          = false
  memory_scanning                                = false
  memory_scanning_scan_with_cpu                  = false
  microsoft_office_file_suspicious_macro_removal = false
  on_write_script_file_visibility                = false
  prevent_suspicious_processes                   = false
  quarantine_and_security_center_registration    = false
  quarantine_on_removable_media                  = false
  quarantine_on_write                            = false
  script_based_execution_monitoring              = false
  sensor_tampering_protection                    = false
  suspicious_registry_operations                 = false
  suspicious_scripts_and_commands                = false
  upload_unknown_executables                     = false
  upload_unknown_detection_related_executables   = false
  volume_shadow_copy_audit                       = false
  volume_shadow_copy_protect                     = false
  vulnerable_driver_protection                   = false
  windows_logon_bypass_sticky_keys               = false
}

#This data source will fetch the details of latest builds available for different OS
#Use the details and update the sensor policy and group id's for which sensor need to be updated.
data "crowdstrike_sensor_update_policy_builds" "builds" {}

#update below details for mac and linux as required
#for Linux we need to also provide value of "build_arm64" 
resource "crowdstrike_sensor_update_policy" "Windows_sensor_update_policy" {
  name = "Windows update policy"
  #this policy will not be applied till we set it to true, 
  #we need to change the details below and then enable this setting to apply the update
  enabled              = false
  description          = "Windows_sensor_update_policy"
  platform_name        = "Windows"
  build                = "18110"           #This is sensor build no, we need to provide build no of N-1 or N-2 version as required
  uninstall_protection = false             #If true it will ask for a maintenance token
  host_groups          = ["host_group_id"] #give the host_group_id's to get this policy applied
  schedule = {
    enabled  = true
    timezone = "Etc/UTC"
    time_blocks = [
      {
        days       = ["sunday", "wednesday"]
        start_time = "12:40"
        end_time   = "16:40"
      }
    ]
  }
}



#here below code specifies filevantage groups creation and filevantage policy for the files integrity
#update the details as required for applying filevantage rules

resource "crowdstrike_filevantage_rule_group" "windows_fileVantage_rule_group" {
  name        = "windows_filevantage_policy"
  description = "fileVantage rules"
  type        = "WindowsRegistry"
  rules = [
    {
      description                 = "first rule"
      path                        = "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\"
      severity                    = "High"
      depth                       = "ANY"
      registry_values             = ["first", "rule"]
      watch_key_value_set_changes = true
      enable_content_capture      = true
    },
    {
      description                 = "second rule"
      path                        = "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\"
      severity                    = "High"
      depth                       = "ANY"
      registry_values             = ["Value1", "Value2"]
      watch_key_value_set_changes = true
      enable_content_capture      = true
    },
  ]
}

resource "crowdstrike_filevantage_rule_group" "mac_fileVantage_rule_group1" {
  name        = "mac_fileVantage_rule_group1"
  description = "fileVantage rules"
  type        = "MacFiles"
  rules = [
    {
      description = "first rule"
      path        = "/path/to/example/"
      severity    = "High"
      depth       = "ANY"
    },
  ]
}

resource "crowdstrike_filevantage_rule_group" "mac_fileVantage_rule_group2" {
  name        = "mac_fileVantage_rule_group2"
  description = "fileVantage rules"
  type        = "MacFiles"
  rules = [
    {
      description              = "first rule"
      path                     = "/path/to/example/"
      severity                 = "High"
      depth                    = "ANY"
      enable_content_capture   = true
      watch_file_write_changes = true
      file_names               = ["example.exe"]
    },
  ]
}

resource "crowdstrike_filevantage_policy" "mac_fileVantage_policy" {
  name          = "mac_fileVantage_policy"
  enabled       = true
  description   = "Mac File Vantage policy"
  platform_name = "Mac"
  # host_groups   = ["1232313"]
  rule_groups = [crowdstrike_filevantage_rule_group.mac_fileVantage_rule_group1.id, crowdstrike_filevantage_rule_group.mac_fileVantage_rule_group2.id]
  scheduled_exclusions = [
    {
      name        = "policy1"
      description = "Run the first 3 days of the month. All day."
      start_date  = "2024-05-21"
      start_time  = "11:09"
      timezone    = "US/Central"
      processes   = "**/example.exe,/path/to/example2.exe"
      repeated = {
        all_day            = true
        frequency          = "monthly"
        monthly_occurrence = "Days"
        days_of_month      = [1, 2, 3]
      }
    },
    {
      name        = "policy2"
      description = "Run monday, tuesday, wednesday. 11:09 - 12:10."
      start_date  = "2024-05-21"
      start_time  = "11:09"
      users       = "admin*,example"
      timezone    = "US/Central"
      repeated = {
        all_day      = false
        start_time   = "11:09"
        end_time     = "12:10"
        frequency    = "weekly"
        days_of_week = ["Monday", "Tuesday", "Wednesday"]
      }
    },
  ]
}
